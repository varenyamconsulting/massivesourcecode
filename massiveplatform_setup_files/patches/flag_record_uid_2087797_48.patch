diff --git a/docroot/sites/all/modules/contrib/flag/flag.rules.inc b/docroot/sites/all/modules/contrib/flag/flag.rules.inc
index 60abc45..e7ba38c 100644
--- a/docroot/sites/all/modules/contrib/flag/flag.rules.inc
+++ b/docroot/sites/all/modules/contrib/flag/flag.rules.inc
@@ -171,7 +171,7 @@ function flag_rules_action_info() {
     'flagging_user' => array(
       'type' => 'user',
       'label' => t('User on whose behalf to flag'),
-      'description' => t('For non-global flags, this is the user on whose behalf to flag the object. In addition, if checked below, the access permissions to the flag are checked against this user.'),
+      'description' => t('This is the user on whose behalf to flag the object. In addition, if checked below, the access permissions to the flag are checked against this user.'),
     ),
     'permission_check' => array(
       'type' => 'boolean',
@@ -301,7 +301,7 @@ function flag_rules_action_info() {
           'flagging_user' => array(
             'type' => 'user',
             'label' => t('User who flagged the @label', array('@label' => $label)),
-            'description' => t('For non-global flags, this is the user who flagged the @label. (For global flags, this argument is ignored.)', array('@label' => $label)),
+            'description' => t('This is the user who flagged the @label.', array('@label' => $label)),
           ),
         ),
         'provides' => array(
@@ -432,17 +432,15 @@ function flag_rules_action_fetch_entity_by_user($flag, $entity) {
     ->fields('fc', array('entity_id'))
     ->condition('entity_type', $flag->entity_type)
     ->condition('fid', $flag->fid);
-  // For global flags the user parameter is ignored, so we add the
-  // extra 'uid' condition when the flag is NOT global.
-  if (!$flag->global) {
-    $user = entity_metadata_wrapper('user', $entity);
-    $sid = $user->flag_sid->value();
-    $query = $query->condition('uid', $user->uid->value());
-    // Filter out any bad session ids and any users that aren't anonymous.
-    if (!empty($sid) && $sid != -1) {
-      $query->condition('sid', $sid);
-    }
+
+  $user = entity_metadata_wrapper('user', $entity);
+  $sid = $user->flag_sid->value();
+  $query = $query->condition('uid', $user->uid->value());
+  // Filter out any bad session ids and any users that aren't anonymous.
+  if (!empty($sid) && $sid != -1) {
+    $query->condition('sid', $sid);
   }
+
   $result = $query->execute();
   $flagged = $result->fetchCol();
   return array('content_flagged_by_user' => $flagged);
@@ -560,7 +558,7 @@ function flag_rules_condition_info() {
           'flagging_user' => array(
             'type' => 'user',
             'label' => t('User on whose behalf to check'),
-            'description' => t('For non-global flags, this is the user on whose behalf the flag is checked.'),
+            'description' => t('This is the user on whose behalf the flag is checked.'),
           ),
         ),
         'group' => t('Flag'),
diff --git a/docroot/sites/all/modules/contrib/flag/includes/flag/flag_flag.inc b/docroot/sites/all/modules/contrib/flag/includes/flag/flag_flag.inc
index 2b96b9f..96de526 100644
--- a/docroot/sites/all/modules/contrib/flag/includes/flag/flag_flag.inc
+++ b/docroot/sites/all/modules/contrib/flag/includes/flag/flag_flag.inc
@@ -726,20 +726,14 @@ class flag_flag {
       return FALSE;
     }
 
-    // Find out which user id to use.
-    $uid = $this->global ? 0 : $account->uid;
+    $uid = $account->uid;
 
     // Find out which session id to use.
-    if ($this->global) {
-      $sid = 0;
-    }
-    else {
-      $sid = flag_get_sid($uid, TRUE);
-      // Anonymous users must always have a session id.
-      if ($sid == 0 && $account->uid == 0) {
-        $this->errors['session'] = t('Internal error: You are anonymous but you have no session ID.');
-        return FALSE;
-      }
+    $sid = flag_get_sid($uid, TRUE);
+    // Anonymous users must always have a session id.
+    if ($sid == 0 && $account->uid == 0) {
+      $this->errors['session'] = t('Internal error: You are anonymous but you have no session ID.');
+      return FALSE;
     }
 
     // @todo: Discuss: Core wraps everything in a try { }, should we?
@@ -1014,8 +1008,8 @@ class flag_flag {
    * Parameters are the same as is_flagged()'s.
    */
   function get_flagging_record($entity_id, $uid = NULL, $sid = NULL) {
-    $uid = $this->global ? 0 : (!isset($uid) ? $GLOBALS['user']->uid : $uid);
-    $sid = $this->global ? 0 : (!isset($sid) ? flag_get_sid($uid) : $sid);
+    $uid = (!isset($uid) ? $GLOBALS['user']->uid : $uid);
+    $sid = (!isset($sid) ? flag_get_sid($uid) : $sid);
 
     // Get all the flaggings for this user on the entity from
     // flag_get_user_flags(), which will statically cache them. This means that
@@ -1051,14 +1045,16 @@ class flag_flag {
    * @private
    */
   function _is_flagged($entity_id, $uid, $sid) {
-    return db_select('flagging', 'fc')
-      ->fields('fc', array('flagging_id'))
+    $query = db_select('flagging', 'fc');
+    $query->fields('fc', array('flagging_id'))
       ->condition('fid', $this->fid)
-      ->condition('uid', $uid)
       ->condition('sid', $sid)
-      ->condition('entity_id', $entity_id)
-      ->execute()
-      ->fetchField();
+      ->condition('entity_id', $entity_id);
+    // Only check the uid for non-global flags.
+    if (!$this->global) {
+      $query->condition('uid', $uid);
+    }
+    return $query->execute()->fetchField();
   }
 
   /**
diff --git a/docroot/sites/all/modules/contrib/flag/includes/views/flag_handler_relationships.inc b/docroot/sites/all/modules/contrib/flag/includes/views/flag_handler_relationships.inc
index 820e544..cf79450 100644
--- a/docroot/sites/all/modules/contrib/flag/includes/views/flag_handler_relationships.inc
+++ b/docroot/sites/all/modules/contrib/flag/includes/views/flag_handler_relationships.inc
@@ -163,7 +163,7 @@ class flag_handler_relationship_content extends flag_handler_relationship {
       'value' => $flag->fid,
       'numeric' => TRUE,
     );
-    if ($this->options['user_scope'] == 'current' && !$flag->global) {
+    if ($this->options['user_scope'] == 'current') {
       $this->definition['extra'][] = array(
         'field' => 'uid',
         'value' => '***CURRENT_USER***',
